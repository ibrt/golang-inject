// Code generated by MockGen. DO NOT EDIT.
// Source: ./fixtures.go

// Package fixtures is a generated GoMock package.
package fixtures

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	injectz "github.com/ibrt/golang-inject/injectz"
)

// MockInitializer is a mock of Initializer interface.
type MockInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockInitializerMockRecorder
}

// MockInitializerMockRecorder is the mock recorder for MockInitializer.
type MockInitializerMockRecorder struct {
	mock *MockInitializer
}

// NewMockInitializer creates a new mock instance.
func NewMockInitializer(ctrl *gomock.Controller) *MockInitializer {
	mock := &MockInitializer{ctrl: ctrl}
	mock.recorder = &MockInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitializer) EXPECT() *MockInitializerMockRecorder {
	return m.recorder
}

// Initialize mocks base method.
func (m *MockInitializer) Initialize(ctx context.Context) (injectz.Injector, injectz.Releaser) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(injectz.Injector)
	ret1, _ := ret[1].(injectz.Releaser)
	return ret0, ret1
}

// Initialize indicates an expected call of Initialize.
func (mr *MockInitializerMockRecorder) Initialize(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockInitializer)(nil).Initialize), ctx)
}

// MockInjector is a mock of Injector interface.
type MockInjector struct {
	ctrl     *gomock.Controller
	recorder *MockInjectorMockRecorder
}

// MockInjectorMockRecorder is the mock recorder for MockInjector.
type MockInjectorMockRecorder struct {
	mock *MockInjector
}

// NewMockInjector creates a new mock instance.
func NewMockInjector(ctrl *gomock.Controller) *MockInjector {
	mock := &MockInjector{ctrl: ctrl}
	mock.recorder = &MockInjectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInjector) EXPECT() *MockInjectorMockRecorder {
	return m.recorder
}

// Inject mocks base method.
func (m *MockInjector) Inject(arg0 context.Context) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Inject", arg0)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Inject indicates an expected call of Inject.
func (mr *MockInjectorMockRecorder) Inject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Inject", reflect.TypeOf((*MockInjector)(nil).Inject), arg0)
}

// MockReleaser is a mock of Releaser interface.
type MockReleaser struct {
	ctrl     *gomock.Controller
	recorder *MockReleaserMockRecorder
}

// MockReleaserMockRecorder is the mock recorder for MockReleaser.
type MockReleaserMockRecorder struct {
	mock *MockReleaser
}

// NewMockReleaser creates a new mock instance.
func NewMockReleaser(ctrl *gomock.Controller) *MockReleaser {
	mock := &MockReleaser{ctrl: ctrl}
	mock.recorder = &MockReleaserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReleaser) EXPECT() *MockReleaserMockRecorder {
	return m.recorder
}

// Release mocks base method.
func (m *MockReleaser) Release() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Release")
}

// Release indicates an expected call of Release.
func (mr *MockReleaserMockRecorder) Release() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockReleaser)(nil).Release))
}

// MockCloser is a mock of Closer interface.
type MockCloser struct {
	ctrl     *gomock.Controller
	recorder *MockCloserMockRecorder
}

// MockCloserMockRecorder is the mock recorder for MockCloser.
type MockCloserMockRecorder struct {
	mock *MockCloser
}

// NewMockCloser creates a new mock instance.
func NewMockCloser(ctrl *gomock.Controller) *MockCloser {
	mock := &MockCloser{ctrl: ctrl}
	mock.recorder = &MockCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloser) EXPECT() *MockCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCloser)(nil).Close))
}
